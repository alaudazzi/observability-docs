[[monitor-aws-esf]]
== Monitor Amazon Web Services ({aws}) with Elastic Serverless Forwarder

++++
<titleabbrev>Monitor {aws} with Elastic Serverless Forwarder</titleabbrev>
++++

The Elastic Serverless Forwarder is an Amazon Web Services (AWS) Lambda function that ships logs from your AWS environment to Elastic. The Elastic Serverless Forwarder works with Elastic Stack 7.17 and later.
For more details about Elastic Serverless Forwarder, check the related https://www.elastic.co/guide/en/esf/current/aws-elastic-serverless-forwarder.html[documentation].

In this tutorial, you'll learn how to use the Elastic Serverless Forwarder -- that is published in the AWS Serverless Application Repository (SAR) -- to analyze Amazon Virtual Private Cloud (Amazon VPC) Flow Logs in the Elastic Stack.
Ingesting Amazon VPC Flow Logs into Elastic enables you to monitor and analyze network traffic within your Amazon VPC, more specifically:

- Analyze the flow log data in {kib}
- Assess security groups rules and uncover security gaps
- Set alerts
- Identify latency issues

[discrete]
[[aws-esf-what-you-learn]]
=== What you'll learn

You'll learn how to:

- Enable AWS VPC flow logs to be sent to your S3 bucket
- Create an SQS queue and notifications for VPC flow logs
- Install and configure the Elastic AWS integration from {kib}

[discrete]
[[aws-esf-prerequisites]]
=== Before you begin

Create a deployment using our hosted {ess} on {ess-trial}[{ecloud}].
The deployment includes an {es} cluster for storing and searching your data, and {kib} for visualizing and managing your data.
You also need an AWS account with permissions to pull the necessary data from AWS.

[discrete]
[[esf-step-one]]
=== Step 1: Create an S3 Bucket

1. In the https://s3.console.aws.amazon.com/s3[AWS S3 console], choose *Create bucket* from the left navigation pane. 
2. Specify the AWS region in which you want it deployed.
3. Enter the bucket name.

For more details, refer to the Amazon documentation on how to https://docs.aws.amazon.com/AmazonS3/latest/userguide/creating-bucket.html[Create your first S3 bucket].

[discrete]
[[esf-step-two]]
=== Step 2: Enable AWS VPC flow logs to be sent to your S3 bucket

1. In the https://console.aws.amazon.com/ec2/[Amazon EC2 console], choose *Network Interfaces* from the left navigation pane.
2. Select the the network interface you want to use.
3. From the *Actions* drop-down menu, choose *Create flow log*.
4. For *Destination*, select *Send to an S3 bucket*.
5. For *S3 bucket ARN*, entre the name of the S3 bucket you created in the previous step. 

For more details, refer to the Amazon documentation on how to https://docs.aws.amazon.com/vpc/latest/userguide/flow-logs-s3.html[Create a flow log that publishes to Amazon S3].

[discrete]
[[esf-step-three]]
=== Step 3:  Create an SQS queue and notifications for VPC flow logs

The Amazon Simple Queue Service (SQS) event notification on Amazon S3 serves as a trigger for the Lambda function. When a new log file gets written to an Amazon S3 bucket and meets the criteria, a notification is generated that triggers the Lambda function.

1. In the https://console.aws.amazon.com/sqs/[SQS console] create a standard SQS queue that uses the default settings.
2. Edit the queue you created to define an advanced access policy. The access policy allows S3 ObjectCreated events to be sent to the queue.
3. Go to the properties of the S3 bucket containing the VPC flow logs and enable event notification.

For more details, refer to the AWS documentation on how to https://docs.aws.amazon.com/AmazonS3/latest/userguide/ways-to-add-notification-config-to-bucket.html[Configure a bucket for notifications].

[discrete]
[[esf-step-four]]
=== Step 4: Install the Elastic AWS integration 

{kib} offers prebuilt dashboards, ingest node configurations, and other assets that help you get the most value out of the logs you ingest. 

1. Go to *Integrations* in {kib} and search for AWS. 
2. Click the AWS integration, select *Settings* and click *Install AWS assets* to install all the AWS integration assets.



Reuse content from this blog: https://www.elastic.co/blog/elastic-and-aws-serverless-application-repository-speed-time-to-actionable-insights-with-frictionless-log-ingestion-from-amazon-s3